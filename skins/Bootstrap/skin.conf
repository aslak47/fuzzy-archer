############################################################################################
############################################################################################
############################################################################################
#                                                                                          #
#                                                                                          #
#                          BOOTSTRAP SKIN CONFIGURATION FILE                               #
#                                                                                          #
#                                                                                          #
############################################################################################
#                         Based on the Standard skin configuration file by                 #
#                    Copyright (c) 2010 Tom Keffer <tkeffer@gmail.com>                     #
#                                                                                          #
#                                                                                          #
############################################################################################
#
#
############################################################################################

[Extras]

    #
    # Put any extra tags here that you want to be available in the templates
    #
    
    # Here's an example. 
    # This radar image would be available as $Extras.radar_img
    # (Comment the line out if you don't want to include the radar image)
    #radar_img = http://radar.weather.gov/ridge/lite/N0R/RTX_loop.gif
    # This URL will be used as the image hyperlink:
    #radar_url = http://radar.weather.gov/ridge/radar.php?product=NCR&rid=RTX&loop=yes
    
    # Here's another. If you have a Google Analytics ID, uncomment and edit 
    # the next line, and the analytics code will automatically be included
    # in your generated HTML files:
    #googleAnalyticsId = UA-12345678-1
    
############################################################################################

[CheetahGenerator]

    # This section is used by the generator CheetahGenerator, and specifies
    # which files are to be generated from which template.

    encoding = utf8    # Possible encodings are 'html_entities', 'utf8', or 'strict_ascii'
    search_list_extensions = user.historygenerator.MyXSearch

    [[SummaryByMonth]]
        #
        # Reports that summarize "by month"
        #
        [[[NOAA_month]]]
            encoding = strict_ascii
            template = NOAA/NOAA-YYYY-MM.txt.tmpl

    [[SummaryByYear]]
        #
        # Reports that summarize "by year"
        #
        [[[NOAA_year]]]
            encoding = strict_ascii
            template = NOAA/NOAA-YYYY.txt.tmpl

    [[ToDate]]
        #
        # Reports that show statistics "to date", such as day-to-date,
        # week-to-date, month-to-date, etc.
        #
        [[[history]]]
            template = history.html.tmpl

    [[HTMLFiles]]
        #
        # Pages that do not require time interval specific tags
        #
        [[[about]]]
            template = about.html.tmpl

        [[[news]]]
            template = news.html.tmpl

        [[[stats]]]
            template = stats.html.tmpl

        [[[day]]]
            template = day.html.tmpl

        [[[week]]]
            template = week.html.tmpl

        [[[month]]]
            template = month.html.tmpl

        [[[year]]]
            template = year.html.tmpl
        
        [[[live]]]
            template = index.html.tmpl

############################################################################################

[CopyGenerator]

    #
    # This section is used by the generator CopyGenerator
    #

    # List of files that are to be copied at the first invocation of the generator only
    copy_once = css/*, js/*

    # List of files to be copied every time:
    # copy_always =

############################################################################################

[HistoryReport]

    #
    # Settings for the HTML month/year colour coded summary table generator
    #

    # minvalues, maxvalues and colours and fontColours should contain the same number of elements.
    #
    # For example,  the [min_temp] example below, if the minimum temperature measured in
    # a month is between -50 and -10 (degC) then the cell will be shaded in html colour code #0029E5.
    #
    # colours = background colour
    # fontColours = foreground colour [optional, defaults to black if omitted]

    # Default is temperature scale
    # These are for Celsius
    #minvalues = -50, -10, -5, 0,  5, 10, 15, 20, 25, 30, 35
    #maxvalues = -10, -5,   0, 5, 10, 15, 20, 25, 30, 35, 60

    # Use these for Fahrenheit
     minvalues = -60, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100
     maxvalues = 10,  20, 30, 40, 50, 60, 70, 80, 90, 100, 140


    colours =   "#0029E5", "#0186E7", "#02E3EA", "#04EC97", "#05EF3D", "#2BF207", "#8AF408", "#E9F70A", "#F9A90B", "#FC4D0D", "#FF0F2D"
    fontColours =   "#FFFFFF", "#FFFFFF", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#FFFFFF", "#FFFFFF", "#FFFFFF"
    monthnames = Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec

    # Restrict the size of the table by ignoring everything before startdate
    # Specify in unix epoch time. e.g. 1325376000 is 1-Jan-2012
    #startdate = 1325376000

    # The Raspberry Pi typically takes 15+ seconds to calculate all the summaries with a few years of weather date.
    # refresh_interval is how often in minutes the tables are calculated.
    refresh_interval = 5

    [[min_temp]]
        header_text = "Minimum Temperature"
        obs_type = outTemp                 # obs_type can be any weewx reading
        aggregate_type = min               # Any of these: 'sum', 'count', 'avg', 'max', 'min'

        summary_column = true
        summary_heading = Min

    #
    # Can also use these aggregate_types:  'max_ge', 'max_le', 'min_le', 'sum_ge' to count days
    # where an observation is ge: greater of equalto, or le: lessthan or equal to a threshold value
    # To specify this threshold, use: aggregate_threshold = [value], [units]
    #
    # e.g Specify temperature threshold of 20C:  aggregate_threshold = 20, degree_C
    #

    [[max_temp]]
        header_text = "Maximum Temperature"    # <== matches corresponding text in lang/{your_language_code}.conf
        obs_type = outTemp
        aggregate_type = max

        summary_column = true
        summary_heading = Max

    [[avg_temp]]
        header_text = "Average Temperature"    # <== matches corresponding text in lang/{your_language_code}.conf
        obs_type = outTemp
        aggregate_type = avg

        summary_column = true
        summary_heading = Avg

    [[rain]]
        header_text = "Rainfall"    # <== matches corresponding text in lang/{your_language_code}.conf
        obs_type = rain
        aggregate_type = sum

        # Override default temperature colour scheme with rain specific scale
        # These are for mm
        #minvalues = 0, 25, 50, 75, 100, 150
        #maxvalues = 25, 50, 75, 100, 150, 1000

        # Use these instead for inches
         minvalues = 0, 1, 2, 3, 4, 6
         maxvalues = 1, 2, 3, 4, 6, 40

        colours = "#E0F8E0", "#A9F5A9", "#58FA58", "#2EFE2E", "#01DF01", "#01DF01"
        fontColours = "#000000", "#000000", "#000000", "#000000", "#000000", "#000000"

        summary_column = true
        summary_heading = Total

    [[rain_days]]
        header_text = "Days of Rainfall"    # <== matches corresponding text in lang/{your_language_code}.conf
        obs_type = rain
        units = ""                        # Override default table units label
        aggregate_type = sum_ge
        aggregate_threshold = 1, mm
        minvalues = 0, 6,  12, 18, 24, 30   # Override default temperature colour scheme with rain specific scale
        maxvalues = 6, 12, 18, 24, 30, 200
        colours = "#E0F8E0", "#A9F5A9", "#58FA58", "#2EFE2E", "#01DF01", "#01DF01"
        fontColours = "#000000", "#000000", "#000000", "#000000", "#000000", "#000000"

        summary_column = true
        summary_heading = Total
    [[max_wind]]
        header_text = "Maximum Gust"    # <== matches corresponding text in lang/{your_language_code}.conf
        obs_type = windGust
        aggregate_type = max
        summary_column = true
        summary_heading = "Max"

        minvalues = 0, 1, 5, 11, 19, 29, 39, 50, 61, 74, 88, 102, 118
        maxvalues = 1, 5, 11, 19, 29, 39, 49, 61, 74, 88, 102, 118, 200
        colours = "#ffffff", "#72d475", "#10cd24", "#00b900", "#f1eea5", "#f6ef27", "#fed6d3", "#ffb6b3", "#ff9e9a", "#ff8281", "#ff6160", "#ff453c", "#ff200e"
        fontColours = "#333333", "#333333", "#333333", "#333333", "#333333", "#333333", "#333333", "#333333", "#333333", "#333333", "#333333", "#333333", "#333333"

    [[NOAA]]
        #
        # Creates a table of links to NOAA reports with the tag $NOAA_table
        # Comment out [[NOAATable]] if you do not need this.
        #

        # Where to find the NOAA files and how they are named
        # Uses Python datetime convention (docs.python.org/2/library/datetime.html):
        # %Y = YYYY, %y = YY, %m = MM, etc.
        #
        year_filename = NOAA/NOAA-%Y.txt
        month_filename = NOAA/NOAA-%Y-%m.txt

############################################################################################
[JSONGenerator]
    enabled = true
    timespan = 27
    locale = en_US # change to your needs
    [[MQTT]]
        [[[connections]]]
            #[[[[public_mqtt]]]]
            #                broker_connection = wss://test.mosquitto.org:8081 # wss (encrypted) websocket connection
            #                [[[[[topics]]]]]
            #                      # JSON topics hold their value(s) in a JSON object. Every key can be matched to a gauge/chart dataset will work with weewx-mqtt, see: https://github.com/weewx/weewx/wiki/mqtt
            #                      [[[[[[weather/loop]]]]]]
            #                          type = JSON
            #                      [[[[[[weather/anothertopic]]]]]]
            #                          type = JSON
            #[[[[my_mqtt_with_public_tokens]]]]
            #    broker_connection = wss://mqtt.flespi.io:443 # wss (encrypted)
            #    mqtt_username = my_public_token # data is exposed to frontend! make sure you use data that is not confidential, like tokens with ACL
            #    mqtt_password = my_public_token # data is exposed to frontend! make sure you use data that is not confidential, like tokens with ACL
            #    [[[[[topics]]]]]
            #          # JSON topics hold their value(s) in a JSON object. Every key can be matched to a gauge/chart dataset will work with weewx-mqtt, see: https://github.com/weewx/weewx/wiki/mqtt
            #          [[[[[[weather/loop]]]]]]
            #              type = JSON
            #          [[[[[[weather/anothertopic]]]]]]
            #              type = JSON
            #Example
            #[[[[hiveMQ_public]]]]
            #    broker_connection = ws://broker.hivemq.com:8000/mqtt # unencrypted websocket connection without credentials
            #    [[[[[topics]]]]]
            #         # topic with type plain has just the value as payload, you have to specify a payload_key to match a gauge/chart dataset
            #         [[[[[[example/sensor/temp]]]]]]
            #             type = plain
            #             payload_key = outTemp_C # matches gauge outTemp and outTemp dataset in outTemp chart
            #         [[[[[[example/sensor/humi]]]]]]
            #             type = plain
            #             payload_key = outHumidity # matches gauge outHumidity and outHumidity dataset in outHumidity chart
            #         [[[[[[example/sensor/dewpoint]]]]]]
            #             type = plain
            #             payload_key = dewpoint_C # matches no gauge below but dewpoint dataset in outTemp chart

[LiveGauges]
    [[outTemp]] #choose weewx field name
        payload_key = outTemp_C
        minvalue = -20
        maxvalue = 40
        splitnumber = 6
        lineColor = '#428bca', '#b44242' # colors are RGBa
        lineColorUntil = 0, maxvalue # color from start of gauge to value
        decimals = 1
        heatMapEnabled = false # disabled heatmao for gauge, default true
        #animation = False # default true

    [[barometer]]
        payload_key = barometer_mbar
        minvalue = 970
        maxvalue = 1050
        splitnumber = 4
        lineColor = '#428bca', '#b44242'
        lineColorUntil = 1013, maxvalue
        decimals = 1

    [[windDir]] #windDir is a special, circular direction gauge
        payload_key = windDir
        lineColorN = '#428bca'
        lineColorS = '#b44242'
        decimals = 0

    [[outHumidity]]
        payload_key = outHumidity
        minvalue = 0
        maxvalue = 100
        splitnumber = 5
        lineColor = '#428bca'
        lineColorUntil = maxvalue
        decimals = 0

    [[windSpeed]]
        payload_key = windSpeed_mps
        source_unit = meter_per_second
        minvalue = 0
        maxvalue = 100
        splitnumber = 5
        lineColor = '#428bca', '#b44242'
        lineColorUntil = 75, maxvalue
        decimals = 0

    [[windGust]]
        payload_key = windGust_mps
        source_unit = meter_per_second
        minvalue = 0
        maxvalue = 160
        splitnumber = 8
        lineColor = '#428bca', '#b44242'
        lineColorUntil = 75, maxvalue
        decimals = 0
[LiveCharts]
    [[outTemp]] # choose freely
        #animation = False # default true
        [[[outTemp]]] #choose weewx field name
          payload_key = outTemp_C
          showMaxMarkPoint = true
          showMinMarkPoint = true
          showAvgMarkLine = true
          lineColor = '#428bca'
          decimals = 1
        [[[dewpoint]]]
          payload_key = dewpoint_C
          showMaxMarkPoint = false
          showMinMarkPoint = false
          showAvgMarkLine = false
          lineColor = '#b44242'
          decimals = 1

    [[barometer]]
        [[[barometer]]]
          payload_key = barometer_mbar
          showMaxMarkPoint = true
          showMinMarkPoint = true
          showAvgMarkLine = false
          lineColor = '#428bca'
          decimals = 1

    [[rain]]
        aggregate_interval_minutes = 30
        [[[rain]]]
          payload_key = rain_mm
          showMaxMarkPoint = false
          showMinMarkPoint = false
          showAvgMarkLine = false
          lineColor = '#428bca'
          decimals = 1

    [[outHumidity]]
      [[[outHumidity]]]
          payload_key = outHumidity
          showMaxMarkPoint = true
          showMinMarkPoint = true
          showAvgMarkLine = false
          lineColor = '#428bca'
          decimals = 0

    [[wind]]
      [[[windSpeed]]]
          payload_key = windSpeed_mps
          source_unit = meter_per_second
          showMaxMarkPoint = false
          showMinMarkPoint = false
          showAvgMarkLine = false
          lineColor = '#b44242'
          decimals = 0
      [[[windGust]]]
          payload_key = windGust_mps
          source_unit = meter_per_second
          showMaxMarkPoint = true
          showMinMarkPoint = false
          showAvgMarkLine = false
          lineColor = '#428bca'
          decimals = 0

    [[windDir]]
      [[[windDir]]]
          payload_key = windDir
          showMaxMarkPoint = false
          showMinMarkPoint = false
          showAvgMarkLine = false
          lineColor = '#428bca'
          decimals = 0
          symbol = circle
          symbolSize = 1
          lineWidth = 0
############################################################################################
#
# The list of generators that are to be run:
#
[Generators]
    generator_list = user.translategenerator.JSONGeneratorTranslated, user.translategenerator.CheetahGeneratorTranslated, weewx.reportengine.CopyGenerator
